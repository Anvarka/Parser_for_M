//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Example.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class ExampleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, LAMBDA=13, VAR=14, REL_NAME=15, UNIFY=16, 
		CONS_NAME=17, WS=18;
	public const int
		RULE_programm = 0, RULE_var_list = 1, RULE_target = 2, RULE_term = 3, 
		RULE_t_seq = 4;
	public static readonly string[] ruleNames = {
		"programm", "var_list", "target", "term", "t_seq"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'='", "'.'", "';'", "'}'", "','", "'/\\'", "'\\/'", "'fresh{'", 
		"'()'", "'('", "')'", "'\\'", null, null, "'=='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "LAMBDA", "VAR", "REL_NAME", "UNIFY", "CONS_NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Example.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExampleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExampleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExampleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgrammContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REL_NAME() { return GetToken(ExampleParser.REL_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ExampleParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext[] target() {
			return GetRuleContexts<TargetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target(int i) {
			return GetRuleContext<TargetContext>(i);
		}
		public ProgrammContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programm; } }
	}

	[RuleVersion(0)]
	public ProgrammContext programm() {
		ProgrammContext _localctx = new ProgrammContext(Context, State);
		EnterRule(_localctx, 0, RULE_programm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(T__0);
			State = 11; Match(REL_NAME);
			State = 12; Match(T__1);
			State = 13; Match(LAMBDA);
			State = 14; var_list();
			State = 15; Match(T__2);
			State = 16; target(0);
			State = 17; Match(T__3);
			State = 18; Match(T__4);
			State = 19; target(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ExampleParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		Var_listContext _localctx = new Var_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_var_list);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; Match(VAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 23; Match(VAR);
				State = 24; Match(T__5);
				State = 25; var_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIFY() { return GetToken(ExampleParser.UNIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REL_NAME() { return GetToken(ExampleParser.REL_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_seqContext t_seq() {
			return GetRuleContext<T_seqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext[] target() {
			return GetRuleContexts<TargetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target(int i) {
			return GetRuleContext<TargetContext>(i);
		}
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
	}

	[RuleVersion(0)]
	public TargetContext target() {
		return target(0);
	}

	private TargetContext target(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TargetContext _localctx = new TargetContext(Context, _parentState);
		TargetContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_target, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 29; term();
				State = 30; Match(UNIFY);
				State = 31; term();
				}
				break;
			case 2:
				{
				State = 33; Match(T__8);
				State = 34; var_list();
				State = 35; Match(T__4);
				}
				break;
			case 3:
				{
				State = 37; Match(REL_NAME);
				State = 38; Match(T__9);
				}
				break;
			case 4:
				{
				State = 39; Match(REL_NAME);
				State = 40; Match(T__10);
				State = 41; t_seq();
				State = 42; Match(T__11);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 54;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 52;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new TargetContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_target);
						State = 46;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 47; Match(T__6);
						State = 48; target(6);
						}
						break;
					case 2:
						{
						_localctx = new TargetContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_target);
						State = 49;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 50; Match(T__7);
						State = 51; target(5);
						}
						break;
					}
					} 
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS_NAME() { return GetToken(ExampleParser.CONS_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_seqContext t_seq() {
			return GetRuleContext<T_seqContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; var_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; Match(CONS_NAME);
				State = 60; Match(T__9);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61; Match(CONS_NAME);
				State = 62; Match(T__10);
				State = 63; t_seq();
				State = 64; Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_seqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public T_seqContext t_seq() {
			return GetRuleContext<T_seqContext>(0);
		}
		public T_seqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_seq; } }
	}

	[RuleVersion(0)]
	public T_seqContext t_seq() {
		T_seqContext _localctx = new T_seqContext(Context, State);
		EnterRule(_localctx, 8, RULE_t_seq);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; term();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; term();
				State = 71; Match(T__5);
				State = 72; t_seq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return target_sempred((TargetContext)_localctx, predIndex);
		}
		return true;
	}
	private bool target_sempred(TargetContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', 'O', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '/', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x37', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', ':', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x45', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'M', '\n', '\x6', '\x3', '\x6', '\x2', 
		'\x3', '\x6', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', 
		'U', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'L', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\a', '\x3', '\x2', '\x2', '\r', '\xE', '\a', '\x11', '\x2', '\x2', '\xE', 
		'\xF', '\a', '\x4', '\x2', '\x2', '\xF', '\x10', '\a', '\xF', '\x2', '\x2', 
		'\x10', '\x11', '\x5', '\x4', '\x3', '\x2', '\x11', '\x12', '\a', '\x5', 
		'\x2', '\x2', '\x12', '\x13', '\x5', '\x6', '\x4', '\x2', '\x13', '\x14', 
		'\a', '\x6', '\x2', '\x2', '\x14', '\x15', '\a', '\a', '\x2', '\x2', '\x15', 
		'\x16', '\x5', '\x6', '\x4', '\x2', '\x16', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1D', '\a', 
		'\x10', '\x2', '\x2', '\x19', '\x1A', '\a', '\x10', '\x2', '\x2', '\x1A', 
		'\x1B', '\a', '\b', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x4', '\x3', 
		'\x2', '\x1C', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\b', '\x4', '\x1', 
		'\x2', '\x1F', ' ', '\x5', '\b', '\x5', '\x2', ' ', '!', '\a', '\x12', 
		'\x2', '\x2', '!', '\"', '\x5', '\b', '\x5', '\x2', '\"', '/', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\a', '\v', '\x2', '\x2', '$', '%', '\x5', 
		'\x4', '\x3', '\x2', '%', '&', '\a', '\a', '\x2', '\x2', '&', '/', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\a', '\x11', '\x2', '\x2', '(', '/', 
		'\a', '\f', '\x2', '\x2', ')', '*', '\a', '\x11', '\x2', '\x2', '*', '+', 
		'\a', '\r', '\x2', '\x2', '+', ',', '\x5', '\n', '\x6', '\x2', ',', '-', 
		'\a', '\xE', '\x2', '\x2', '-', '/', '\x3', '\x2', '\x2', '\x2', '.', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '.', '#', '\x3', '\x2', '\x2', '\x2', 
		'.', '\'', '\x3', '\x2', '\x2', '\x2', '.', ')', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x38', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\f', 
		'\a', '\x2', '\x2', '\x31', '\x32', '\a', '\t', '\x2', '\x2', '\x32', 
		'\x37', '\x5', '\x6', '\x4', '\b', '\x33', '\x34', '\f', '\x6', '\x2', 
		'\x2', '\x34', '\x35', '\a', '\n', '\x2', '\x2', '\x35', '\x37', '\x5', 
		'\x6', '\x4', '\a', '\x36', '\x30', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\a', '\x3', '\x2', '\x2', '\x2', ':', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x45', '\x3', '\x2', '\x2', '\x2', '<', 
		'\x45', '\x5', '\x4', '\x3', '\x2', '=', '>', '\a', '\x13', '\x2', '\x2', 
		'>', '\x45', '\a', '\f', '\x2', '\x2', '?', '@', '\a', '\x13', '\x2', 
		'\x2', '@', '\x41', '\a', '\r', '\x2', '\x2', '\x41', '\x42', '\x5', '\n', 
		'\x6', '\x2', '\x42', '\x43', '\a', '\xE', '\x2', '\x2', '\x43', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x44', ';', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x44', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '?', '\x3', '\x2', '\x2', '\x2', '\x45', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'M', '\x3', '\x2', '\x2', '\x2', 'G', 'M', '\x5', '\b', 
		'\x5', '\x2', 'H', 'I', '\x5', '\b', '\x5', '\x2', 'I', 'J', '\a', '\b', 
		'\x2', '\x2', 'J', 'K', '\x5', '\n', '\x6', '\x2', 'K', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x46', '\x3', '\x2', '\x2', '\x2', 'L', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 'M', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x1C', '.', '\x36', '\x38', '\x44', 
		'L',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
